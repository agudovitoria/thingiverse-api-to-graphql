{"version":3,"sources":["shared/ApiConfig.ts","service/StorageService.ts","service/LoginService.ts","page/Login.tsx","components/Title.tsx","page/Home.tsx","components/ErrorMessage.tsx","components/Loading.tsx","context/AuthContext.tsx","page/Callback.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ApiConfig","loginUri","base","codeToTokenUri","client","axios","create","baseURL","login","sessionStorage","getItem","window","location","href","tokenFromCode","code","urlSearchParams","URLSearchParams","append","url","toString","get","then","data","accessToken","Error","access_token","removeItem","setItem","saveToken","styles","createUseStyles","title","fontSize","textAlign","useStyles","Container","Row","Col","className","Button","variant","onClick","Title","message","content","AuthContext","createContext","token","setToken","AuthContextProvider","props","initialState","setState","state","useState","Provider","value","children","useContext","loading","setLoading","error","setError","setCode","useEffect","setAsLoading","catch","manageErrorResponse","finally","setAsReady","codeParamValue","search","retrieveCodeFromUri","ErrorMessage","Loading","Navbar","Nav","Link","exact","path","Home","Login","component","Callback","Boolean","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.b096f444.chunk.js","sourcesContent":["export class ApiConfig {\n  static readonly base = 'http://localhost:8080/api';\n  static readonly loginUri = `${ApiConfig.base}/login`;\n  static readonly codeToTokenUri = '/exchange';\n};\n","import { TokenAccess } from '../domain/TokenResponse';\n\nconst TOKEN_KEY = 'access_token';\n\nexport const haveToken = (): boolean => !!sessionStorage.getItem(TOKEN_KEY);\n\nexport const saveToken = ({ access_token }: TokenAccess): void => {\n    sessionStorage.removeItem(TOKEN_KEY);\n    sessionStorage.setItem(TOKEN_KEY, access_token);\n};\n\nexport const getToken = () => sessionStorage.getItem(TOKEN_KEY);\n","import axios, { AxiosInstance } from 'axios';\nimport { TokenAccess, TokenResponse } from '../domain/TokenResponse';\nimport { ApiConfig } from '../shared/ApiConfig';\nimport { haveToken, saveToken } from './StorageService';\n\nconst client: AxiosInstance = axios.create({ baseURL: ApiConfig.base });\n\nexport const goToAuthPage = () => window.location.href = ApiConfig.loginUri;\nexport const  goToMainPage =  () => window.location.href = '/';\n\nexport const login = () => {\n    if (!haveToken()) {\n        return goToAuthPage();\n    }\n\n    goToMainPage();\n};\n\nexport const tokenFromCode = (code: string): Promise<TokenAccess> => {\n    const urlSearchParams: URLSearchParams = new URLSearchParams();\n    urlSearchParams.append('code', code);\n\n    const url: string = `${ApiConfig.codeToTokenUri}?${urlSearchParams.toString()}`;\n\n    return client.get(url)\n        .then(({ data }: TokenResponse) => data)\n        .then((accessToken: TokenAccess) => {\n            if (!accessToken) {\n                throw new Error('Invalid access token response');\n            }\n\n            saveToken(accessToken);\n\n            return accessToken;\n        });\n};\n\n","import React from \"react\";\nimport { createUseStyles } from 'react-jss';\nimport { login } from \"../service/LoginService\";\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\n\nexport default () => {\n    const useStyles = createUseStyles({\n        title: {\n            fontSize: '48px',\n            textAlign: 'center'\n        }\n    });\n\n    const styles = useStyles();\n    return (\n        <Container>\n            <Row>\n                <Col>\n                    <Row>\n                        <Col>\n                            <span className={styles.title}>Thingiverse Graphql</span>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Button variant=\"outline-primary\"\n                                    onClick={() => login()}>\n                                LOGIN\n                            </Button>\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n","import React from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { TitleProps } from '../domain/TitleProps';\n\nexport default ({ title }: TitleProps) => {\n  const useStyles = createUseStyles({\n    title: {\n      fontSize: '48px',\n      textAlign: 'center'\n    }\n  });\n\n  const styles = useStyles();\n\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <span className={styles.title}>{title || 'untitled'}</span>\n      </div>\n    </div>\n  );\n};","import React from 'react';\nimport Title from '../components/Title';\n\nexport default () => (\n    <div className=\"row centered\">\n        <div className=\"col centered flex-50\">\n            <div className=\"box\">\n                <Title title=\"Home page\" />\n            </div>\n        </div>\n    </div>\n);","import React from 'react';\nimport { ErrorResponse } from '../domain/ErrorResponse';\n\nexport default ({ message }: ErrorResponse) => (\n  <div className=\"row\">\n    <div className=\"col\">\n      <span className=\"error-message\">{message || 'No message'}</span>\n    </div>\n  </div>\n);","import React from 'react';\nimport { LoadingProps } from '../domain/LoadingProps';\n\nexport default ({ content }: LoadingProps) => (\n  <div className=\"row\">\n    <div className=\"col\">\n      <span>{content}</span>\n    </div>\n  </div>\n);","import React, { useState, createContext, Context} from 'react';\nimport { TokenAccess } from '../domain/TokenResponse';\n\nexport interface AuthStore {\n    token: string;\n    setToken: (accessToken: TokenAccess) => void;\n}\n\nexport const AuthContext: Context<AuthStore> = createContext({\n    token: '',\n    setToken: (accessToken: TokenAccess) => {\n    }\n});\n\nexport const AuthContextProvider = (props: React.PropsWithChildren<any>) => {\n    const setToken = ({ access_token: token }: TokenAccess) => setState({\n        ...state,\n        token\n    });\n\n    const initialState: AuthStore = {\n        token: '',\n        setToken\n    };\n\n    const [state, setState] = useState(initialState);\n\n    return (\n        <AuthContext.Provider value={initialState}>\n            { props.children }\n        </AuthContext.Provider>\n    );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport ErrorMessage from '../components/ErrorMessage';\nimport Loading from '../components/Loading';\nimport Title from '../components/Title';\nimport { ErrorResponse } from '../domain/ErrorResponse';\nimport { tokenFromCode } from '../service/LoginService';\nimport { TokenAccess } from '../domain/TokenResponse';\nimport { AuthContext } from '../context/AuthContext';\n\ninterface CallbackProps {\n    location: Location;\n}\n\nexport default (props: CallbackProps) => {\n    const { token, setToken } = useContext(AuthContext);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [error, setError] = useState<string>('');\n    const [code, setCode] = useState('');\n\n    useEffect(() => {\n        setAsLoading();\n        tokenFromCode(code)\n            .then((accessToken: TokenAccess) => {\n                setToken(accessToken);\n            })\n            .then(() => {\n                window.location.href = '/';\n            })\n            .catch(manageErrorResponse)\n            .finally(() => setAsReady());\n    }, [code]);\n\n    const setAsLoading = () => setLoading(true);\n    const setAsReady = () => setLoading(false);\n    const manageErrorResponse = ({ message }: ErrorResponse) => setError(message);\n\n    const retrieveCodeFromUri = (location: Location) => {\n        const parameters = new URLSearchParams(location.search);\n        const codeParamValue = parameters.get('code') || '';\n        const codeIsNew = !!codeParamValue && (!code || codeParamValue !== code);\n\n        if (codeIsNew) {\n            setCode(codeParamValue);\n        }\n    };\n\n    retrieveCodeFromUri(props.location);\n\n    return (\n        <div className=\"row centered\">\n            <div className=\"col centered flex-50\">\n                <div className=\"box\">\n                    <Title title=\"Callback page\"/>\n                    {!!error && <ErrorMessage message={error}/>}\n                    {loading && (<Loading content={`Retrieving token from code ${code}`}/>)}\n                    {!!token && (<Loading content={`Received token: ${token}`}/>)}\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport { Nav, Navbar } from 'react-bootstrap';\n\nimport Login from './page/Login';\nimport Home from './page/Home';\nimport Callback from './page/Callback';\nimport { AuthContextProvider } from './context/AuthContext';\n\nexport default () => (\n    <AuthContextProvider>\n        <Router>\n            <Navbar>\n                <Nav.Link href='/'>Home</Nav.Link>\n                <Nav.Link href='/login'>Login</Nav.Link>\n            </Navbar>\n\n            <Switch>\n                <Route exact path=\"/\">\n                    <Home/>\n                </Route>\n                <Route exact path=\"/login\">\n                    <Login/>\n                </Route>\n                <Route path=\"/callback\" component={Callback}></Route>\n            </Switch>\n        </Router>\n    </AuthContextProvider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n        <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}